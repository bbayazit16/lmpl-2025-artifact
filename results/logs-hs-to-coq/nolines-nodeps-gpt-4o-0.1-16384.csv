name,file,result,error_type,error
Eq_eq_bool,GHC/Base.v,True,,
iterates_In,GHC/Enum.v,False,add_err,Syntax error: ']' expected after [tactic_then_gen] (in [tactic:tactic_expr]).
Foldable_length_cons,Data/Foldable.v,False,feedback,"In environment a : Type x : a xs : list a Unable to unify ""Z.succ (length xs)"" with ""length (x :: xs)""."
flat_map_nil,GHC/Base.v,True,,
flat_map_unpack_cons_f,GHC/List.v,True,,
Foldable_foldl'_cons,Data/Foldable.v,True,,
instance_MonoidLaws_list,GHC/Base.v,False,feedback,No product even after head-reduction.
enumFromTo_Int_iterates',GHC/Enum.v,False,add_err,Syntax error: [tactic:ltac_use_default] expected after [tactic:tactic] (in [vernac:tactic_command]).
eftInt_aux_unroll,GHC/Enum.v,False,feedback,"In environment to, from : Int pf, Hle : (from <= to)%Z Unable to unify  ""from   :: match Z.eq_dec from to with      | left _ => nil      | right neq =>          eftInt_aux to (from + 1)%Z (eftInt_aux_pf (y:=to) (x:=from) pf neq)      end"" with  ""eftInt_aux_func     (existT (fun y : Int => {x : Int & (x <= y)%Z}) to        (existT (Z.le^~ to) from pf))""."
eq_replace_r,GHC/Base.v,False,feedback,not a rewritable relation: a in rule H0
N_popcount_Nsucc_double,Data/Bits/Popcount.v,False,feedback,The reference N_popcount_succ_double was not found in the current environment.
EqExact_Data_Either_Either,Data/Either.v,False,feedback,Not an inductive goal with 1 constructor.
Pos_popcount_pow2,Data/Bits/Popcount.v,False,feedback,The reference Pos2Nat.inj_pow was not found in the current environment.
Foldable_any_app,Data/Foldable.v,False,feedback,The LHS of fold_right_app     (fold_right _ _ (_ ++ _)) does not match any subterm of the goal
Eq_eq_Word,GHC/Base.v,False,feedback,Cannot coerce reflect to an evaluable reference.
unzip_zip,GHC/List.v,False,feedback,Wrong bullet +: Current bullet + is not finished.
iterates'_In,GHC/Enum.v,False,feedback,Not an inductive goal with 1 constructor.
Foldable_length_nil,Data/Foldable.v,True,,
lines_def,Data/OldList.v,False,feedback,"In environment s : String Hnull : List.null s = true Unable to unify ""nil"" with  ""Wf.Fix_sub String (Wf.MR lt (fun recarg : String => length recarg))     OldList.lines_obligation_2 (fun _ : String => list String)     (fun (recarg : String)        (lines' : {recarg' : String | length recarg' < length recarg} ->                  list String) =>      if List.null recarg      then nil      else       (let        '(h, t) as anonymous' :=         (let          '(l, s') as anonymous' :=           List.break (fun arg_4__ : Char => arg_4__ == newline) recarg           return             (anonymous' =              List.break (fun arg_4__ : Char => arg_4__ == newline) recarg ->              list Char * list (list Char)) in           fun             Heq_anonymous : (l, s') =                             List.break                               (fun arg_4__ : Char => arg_4__ == newline)                               recarg =>           (l,           match s' as s'' return (s'' = s' -> list (list Char)) with           | nil => fun _ : nil = s' => nil           | wildcard' :: s'' =>               fun Heq_s' : wildcard' :: s'' = s' =>               lines'                 (exist                    (fun recarg' : String => length recarg' < length recarg)                    s''                    (OldList.lines_obligation_1 recarg l s' Heq_anonymous                       wildcard' s'' Heq_s'))           end eq_refl)) eq_refl         return           (anonymous' =            (let             '(l, s') as anonymous'0 :=              List.break (fun arg_4__ : Char => arg_4__ == newline) recarg              return                (anonymous'0 =                 List.break (fun arg_4__ : Char => arg_4__ == newline) recarg ->                 list Char * list (list Char)) in              fun                Heq_anonymous : (l, s') =                                List.break                                  (fun arg_4__ : Char => arg_4__ == newline)                                  recarg =>              (l,              match s' as s'' return (s'' = s' -> list (list Char)) with              | nil => fun _ : nil = s' => nil              | wildcard' :: s'' =>                  fun Heq_s' : wildcard' :: s'' = s' =>                  lines'                    (exist                       (fun recarg' : String => length recarg' < length recarg)                       s''                       (OldList.lines_obligation_1 recarg l s' Heq_anonymous                          wildcard' s'' Heq_s'))              end eq_refl)) eq_refl -> list (list Char)) in         fun           _ : (h, t) =               (let                '(l, s') as anonymous' :=                 List.break (fun arg_4__ : Char => arg_4__ == newline) recarg                 return                   (anonymous' =                    List.break (fun arg_4__ : Char => arg_4__ == newline)                      recarg -> list Char * list (list Char)) in                 fun                   Heq_anonymous : (l, s') =                                   List.break                                     (fun arg_4__ : Char => arg_4__ == newline)                                     recarg =>                 (l,                 match s' as s'' return (s'' = s' -> list (list Char)) with                 | nil => fun _ : nil = s' => nil                 | wildcard' :: s'' =>                     fun Heq_s' : wildcard' :: s'' = s' =>                     lines'                       (exist                          (fun recarg' : String =>                           length recarg' < length recarg) s''                          (OldList.lines_obligation_1 recarg l s'                             Heq_anonymous wildcard' s'' Heq_s'))                 end eq_refl)) eq_refl => h :: t) eq_refl) s""."
eq_replace_l,GHC/Base.v,False,feedback,Cannot find a relation to rewrite.
hs_coq_foldl'_list,Data/Foldable.v,False,feedback,"In environment A : Type B : Type f : B -> A -> B z : B a : A l' : list A IHl' : Foldable__list (forall b a : Type, (b -> a -> b) -> b -> list a -> b)          (foldl'__ list) B A f z l' = fold_left f l' z Unable to unify  ""Foldable__list (forall b a : Type, (b -> a -> b) -> b -> list a -> b)     (foldl'__ list) B A f z l' = fold_left f l' z"" with  ""Foldable__list (forall b a : Type, (b -> a -> b) -> b -> list a -> b)     (foldl'__ list) B A f z (a :: l') = fold_left f l' (f z a)""."
instance_MonadLaws_Data_Either_Either,Data/Either.v,False,feedback,The reference instance_Monad__Either was not found in the current environment.
eftInt_aux_pf,../base/GHC/Enum.v,True,,
parametric_eq_sym,GHC/Base.v,False,feedback,Cannot coerce EqLaws to an evaluable reference.
foldr_initial,GHC/Base.v,True,,
instance_SemigroupLaws_option,GHC/Base.v,False,feedback,The reference associativity was not found in the current environment.
Build_EqLaws_reflect,GHC/Base.v,False,feedback,No assumption in ((x == x) = true)
N_popcount_diff,Data/Bits/Popcount.v,False,feedback,The reference N.bits_add was not found in the current environment.
In_zip_swap,GHC/List.v,False,feedback,The reference H was not found in the current environment.
Eq_Symmetric,GHC/Base.v,False,feedback,Cannot coerce EqLaws to an evaluable reference.
List_foldl_foldr,GHC/List.v,True,,
instance_SemigroupLaws_unit,GHC/Base.v,True,,
dropWhile_cons_prop,../base/Data/OldList.v,True,,
iterates'_length,GHC/Enum.v,False,feedback,The LHS of IH     (length (iterates' n' f z)) does not match any subterm of the goal
hs_coq_reverse,GHC/List.v,False,feedback,A is already used.
instance_ApplicativeLaws_Data_Either_Either,Data/Either.v,False,feedback,The reference Either_instance_Applicative was not found in the current environment.
fst_pair,Data/Tuple.v,True,,
hs_coq_foldl_list',Data/Foldable.v,False,feedback,"In environment A : Type B : Type f : B -> A -> B z : B x : A xs : list A IH : Base.foldl f z xs = fold_left f xs z Unable to unify ""Base.foldl f z xs = fold_left f xs z"" with  ""Base.foldl f (f z x) xs = fold_left f xs (f z x)""."
instance_FunctorLaws_identity,Data/Functor/Identity.v,False,feedback,"In environment a : Type x : Identity a Unable to unify ""x"" with ""Base.fmap (fun x : a => x) x""."
iter_plus_nat,GHC/Enum.v,False,feedback,"Found no subterm matching ""(?M1590 + S ?M1591)%nat"" in the current goal."
Foldable_foldr_cons,Data/Foldable.v,True,,
lines_cons,Data/OldList.v,False,feedback,"In environment c : Char s, l : list Char Heq : List.break (fun x : Char => x == newline) (c :: s) = (l, nil) Unable to unify  ""let (h, t) :=     let (l, s') :=       if c == newline       then (nil, c :: s)       else        let        '(ys, zs) := List.break (fun x : Char => x == newline) s in         (c :: ys, zs) in     (l,     match s' with     | nil => nil     | _ :: s'' =>         Wf.Fix_sub String (Wf.MR lt (fun recarg : String => length recarg))           OldList.lines_obligation_2 (fun _ : String => list String)           (fun (recarg : String)              (lines' : {recarg' : String | length recarg' < length recarg} ->                        list String) =>            if List.null recarg            then nil            else             (let              '(h, t) as anonymous' :=               (let                '(l0, s'0) as anonymous' :=                 List.break (fun arg_4__ : Char => arg_4__ == newline) recarg                 return                   (anonymous' =                    List.break (fun arg_4__ : Char => arg_4__ == newline)                      recarg -> list Char * list (list Char)) in                 fun                   Heq_anonymous : (l0, s'0) =                                   List.break                                     (fun arg_4__ : Char => arg_4__ == newline)                                     recarg =>                 (l0,                 match                   s'0 as s''0 return (s''0 = s'0 -> list (list Char))                 with                 | nil => fun _ : nil = s'0 => nil                 | wildcard' :: s''0 =>                     fun Heq_s' : wildcard' :: s''0 = s'0 =>                     lines'                       (exist                          (fun recarg' : String =>                           length recarg' < length recarg) s''0                          (OldList.lines_obligation_1 recarg l0 s'0                             Heq_anonymous wildcard' s''0 Heq_s'))                 end eq_refl)) eq_refl               return                 (anonymous' =                  (let                   '(l0, s'0) as anonymous'0 :=                    List.break (fun arg_4__ : Char => arg_4__ == newline)                      recarg                    return                      (anonymous'0 =                       List.break (fun arg_4__ : Char => arg_4__ == newline)                         recarg -> list Char * list (list Char)) in                    fun                      Heq_anonymous : (l0, s'0) =                                      List.break                                        (fun arg_4__ : Char =>                                         arg_4__ == newline) recarg =>                    (l0,                    match                      s'0 as s''0 return (s''0 = s'0 -> list (list Char))                    with                    | nil => fun _ : nil = s'0 => nil                    | wildcard' :: s''0 =>                        fun Heq_s' : wildcard' :: s''0 = s'0 =>                        lines'                          (exist                             (fun recarg' : String =>                              length recarg' < length recarg) s''0                             (OldList.lines_obligation_1 recarg l0 s'0                                Heq_anonymous wildcard' s''0 Heq_s'))                    end eq_refl)) eq_refl -> list (list Char)) in               fun                 _ : (h, t) =                     (let                      '(l0, s'0) as anonymous' :=                       List.break (fun arg_4__ : Char => arg_4__ == newline)                         recarg                       return                         (anonymous' =                          List.break                            (fun arg_4__ : Char => arg_4__ == newline) recarg ->                          list Char * list (list Char)) in                       fun                         Heq_anonymous : (l0, s'0) =                                         List.break                                           (fun arg_4__ : Char =>                                            arg_4__ == newline) recarg =>                       (l0,                       match                         s'0 as s''0 return (s''0 = s'0 -> list (list Char))                       with                       | nil => fun _ : nil = s'0 => nil                       | wildcard' :: s''0 =>                           fun Heq_s' : wildcard' :: s''0 = s'0 =>                           lines'                             (exist                                (fun recarg' : String =>                                 length recarg' < length recarg) s''0                                (OldList.lines_obligation_1 recarg l0 s'0                                   Heq_anonymous wildcard' s''0 Heq_s'))                       end eq_refl)) eq_refl => h :: t) eq_refl) s''     end) in   h :: t"" with  ""Wf.Fix_sub String (Wf.MR lt (fun recarg : String => length recarg))     OldList.lines_obligation_2 (fun _ : String => list String)     (fun (recarg : String)        (lines' : {recarg' : String | length recarg' < length recarg} ->                  list String) =>      if List.null recarg      then nil      else       (let        '(h, t) as anonymous' :=         (let          '(l, s') as anonymous' :=           List.break (fun arg_4__ : Char => arg_4__ == newline) recarg           return             (anonymous' =              List.break (fun arg_4__ : Char => arg_4__ == newline) recarg ->              list Char * list (list Char)) in           fun             Heq_anonymous : (l, s') =                             List.break                               (fun arg_4__ : Char => arg_4__ == newline)                               recarg =>           (l,           match s' as s'' return (s'' = s' -> list (list Char)) with           | nil => fun _ : nil = s' => nil           | wildcard' :: s'' =>               fun Heq_s' : wildcard' :: s'' = s' =>               lines'                 (exist                    (fun recarg' : String => length recarg' < length recarg)                    s''                    (OldList.lines_obligation_1 recarg l s' Heq_anonymous                       wildcard' s'' Heq_s'))           end eq_refl)) eq_refl         return           (anonymous' =            (let             '(l, s') as anonymous'0 :=              List.break (fun arg_4__ : Char => arg_4__ == newline) recarg              return                (anonymous'0 =                 List.break (fun arg_4__ : Char => arg_4__ == newline) recarg ->                 list Char * list (list Char)) in              fun                Heq_anonymous : (l, s') =                                List.break                                  (fun arg_4__ : Char => arg_4__ == newline)                                  recarg =>              (l,              match s' as s'' return (s'' = s' -> list (list Char)) with              | nil => fun _ : nil = s' => nil              | wildcard' :: s'' =>                  fun Heq_s' : wildcard' :: s'' = s' =>                  lines'                    (exist                       (fun recarg' : String => length recarg' < length recarg)                       s''                       (OldList.lines_obligation_1 recarg l s' Heq_anonymous                          wildcard' s'' Heq_s'))              end eq_refl)) eq_refl -> list (list Char)) in         fun           _ : (h, t) =               (let                '(l, s') as anonymous' :=                 List.break (fun arg_4__ : Char => arg_4__ == newline) recarg                 return                   (anonymous' =                    List.break (fun arg_4__ : Char => arg_4__ == newline)                      recarg -> list Char * list (list Char)) in                 fun                   Heq_anonymous : (l, s') =                                   List.break                                     (fun arg_4__ : Char => arg_4__ == newline)                                     recarg =>                 (l,                 match s' as s'' return (s'' = s' -> list (list Char)) with                 | nil => fun _ : nil = s' => nil                 | wildcard' :: s'' =>                     fun Heq_s' : wildcard' :: s'' = s' =>                     lines'                       (exist                          (fun recarg' : String =>                           length recarg' < length recarg) s''                          (OldList.lines_obligation_1 recarg l s'                             Heq_anonymous wildcard' s'' Heq_s'))                 end eq_refl)) eq_refl => h :: t) eq_refl)      (c :: s)""."
Foldable_foldl'_app,Data/Foldable.v,True,,
flat_map_cons_id,GHC/Base.v,True,,
Eq_eq_Int,GHC/Base.v,False,feedback,Cannot coerce reflect to an evaluable reference.
mapAccumL_cons,Data/Traversable.v,False,feedback,"In environment a : Type b : Type c : Type x : b xs : list b f : a -> b -> a * c s, s' : a y : c s'' : a ys : list c Unable to unify ""(s'', y :: ys)"" with ""mapAccumL f s (x :: xs)""."
Eq_Equivalence,GHC/Base.v,False,feedback,"In environment a : Type H : Eq_ a H0 : EqLaws a x : a Unable to unify ""true"" with ""x == x""."
break_length,../base/Data/OldList.v,False,feedback,The reference List.span_spec was not found in the current environment.
Neq_sym,GHC/Base.v,False,feedback,No product even after head-reduction.
mapAccumL_nil,Data/Traversable.v,True,,
Eq_m,GHC/Base.v,False,feedback,not a rewritable relation: a in rule Hxy
EqExact_Proxy,Data/Proxy.v,False,feedback,Not an inductive goal with 1 constructor.
Neq_atrans,GHC/Base.v,False,feedback,"Anomaly ""Evar ?X409 was not declared."" Please report at http://coq.inria.fr/bugs/."
reverse_unit,GHC/List.v,False,feedback,"Found no subterm matching ""reverse (l' ++ [a])"" in the current goal."
hs_coq_partition,Data/OldList.v,False,feedback,"In environment A : Type p : A -> bool x : A xs : list A IH : OldList.partition p xs = partition p xs Unable to unify ""let (g, d) := partition p xs in (x :: g, d)"" with  ""select p x (partition p xs)""."
Eq_Reflexive,GHC/Base.v,False,feedback,Applied theorem does not have enough premises.
reverse_append,GHC/List.v,False,feedback,"Found no subterm matching ""?M2050 ++ ?M2051 ++ ?M2052"" in the current goal."
N_popcount_1_pow2,Data/Bits/Popcount.v,False,feedback,"In environment n : N H : N.eqf (N.testbit (N_popcount n)) (N.testbit 1) H0 : n <> 0%N Unable to unify  ""(2 ^ N.log2 ?M1711 <= ?M1711 < 2 ^ N.succ (N.log2 ?M1711))%N"" with ""N.testbit n (N.log2 n) = true""."
iterates_length,GHC/Enum.v,False,feedback,The LHS of IH     (length (iterates n f z)) does not match any subterm of the goal
Pop_popcount_diff,Data/Bits/Popcount.v,False,add_err,Syntax error: '*' or [oriented_rewriter] expected after 'rewrite' (in [tactic:simple_tactic]).
elem_eq,Data/Foldable.v,False,feedback,Expects a disjunctive pattern with 1 branch or a conjunctive pattern made of 4 patterns.
length_zip,GHC/List.v,True,,
In_zip_fst,GHC/List.v,False,feedback,No primitive equality found.
instance_ApplicativeLaws_option,GHC/Base.v,False,feedback,"In environment a : Type v : option a Unable to unify ""v"" with ""pure id <*> v""."
N_popcount_pow2,Data/Bits/Popcount.v,False,feedback,"Found no subterm matching ""N.eqf (N.testbit ?n) (N.testbit ?n0)"" in the current goal."
snd_unzip_map,GHC/List.v,False,feedback,"Found no subterm matching ""snd (unzip (map (fun x : a => (f x, g x)) xs'))"" in the current goal."
words_cons,Data/OldList.v,False,feedback,"In environment c : Char s : list Char Hspace : Unicode.isSpace c = true Unable to unify  ""Wf.Fix_sub String (Wf.MR lt (fun recarg : String => length recarg))     OldList.words_obligation_3 (fun _ : String => list String)     (fun (recarg : String)        (words' : {recarg' : String | length recarg' < length recarg} ->                  list String) =>      match        List.dropWhile Unicode.isSpace recarg as anonymous'        return          (anonymous' = List.dropWhile Unicode.isSpace recarg -> list String)      with      | nil => fun _ : nil = List.dropWhile Unicode.isSpace recarg => nil      | c :: l =>          fun Heq_anonymous : c :: l = List.dropWhile Unicode.isSpace recarg          =>          (let           '(w, s'') as anonymous' :=            if Unicode.isSpace c            then (nil, c :: l)            else             let '(ys, zs) := List.break Unicode.isSpace l in (c :: ys, zs)            return              (anonymous' =               (if Unicode.isSpace c                then (nil, c :: l)                else                 let                 '(ys, zs) := List.break Unicode.isSpace l in (c :: ys, zs)) ->               list String) in            fun              Heq_anonymous0 : (w, s'') =                               (if Unicode.isSpace c                                then (nil, c :: l)                                else                                 let                                 '(ys, zs) := List.break Unicode.isSpace l in                                  (c :: ys, zs)) =>            w            :: words'                 (exist                    (fun recarg' : String => length recarg' < length recarg)                    s''                    (OldList.words_obligation_1 recarg                        (c :: l) (OldList.words_obligation_2 c l) Heq_anonymous                       w s'' Heq_anonymous0))) eq_refl      end eq_refl) s"" with  ""Wf.Fix_sub String (Wf.MR lt (fun recarg : String => length recarg))     OldList.words_obligation_3 (fun _ : String => list String)     (fun (recarg : String)        (words' : {recarg' : String | length recarg' < length recarg} ->                  list String) =>      match        List.dropWhile Unicode.isSpace recarg as anonymous'        return          (anonymous' = List.dropWhile Unicode.isSpace recarg -> list String)      with      | nil => fun _ : nil = List.dropWhile Unicode.isSpace recarg => nil      | c :: l =>          fun Heq_anonymous : c :: l = List.dropWhile Unicode.isSpace recarg          =>          (let           '(w, s'') as anonymous' :=            if Unicode.isSpace c            then (nil, c :: l)            else             let '(ys, zs) := List.break Unicode.isSpace l in (c :: ys, zs)            return              (anonymous' =               (if Unicode.isSpace c                then (nil, c :: l)                else                 let                 '(ys, zs) := List.break Unicode.isSpace l in (c :: ys, zs)) ->               list String) in            fun              Heq_anonymous0 : (w, s'') =                               (if Unicode.isSpace c                                then (nil, c :: l)                                else                                 let                                 '(ys, zs) := List.break Unicode.isSpace l in                                  (c :: ys, zs)) =>            w            :: words'                 (exist                    (fun recarg' : String => length recarg' < length recarg)                    s''                    (OldList.words_obligation_1 recarg                        (c :: l) (OldList.words_obligation_2 c l) Heq_anonymous                       w s'' Heq_anonymous0))) eq_refl      end eq_refl) (c :: s)""."
dropWhile_cons_length,../base/Data/OldList.v,False,feedback,"In environment A : Type c, x : A xs : list A p : A -> bool IH : forall s' : list A,      c :: s' = List.dropWhile p xs -> length s' < length xs s' : list A Hp : p x = true H : length s' < length xs Unable to unify ""S (S ?M1810) <= S ?M1811"" with  ""S (length s') <= S (length xs)""."
words_nil,Data/OldList.v,True,,
forM_map,Data/Traversable.v,False,feedback,Unable to find an instance for the variable r__.
flat_map_app,GHC/Base.v,True,,
parametric_eq_trans,GHC/Base.v,False,feedback,Cannot coerce EqLaws to an evaluable reference.
safeSubN_sub,../base/GHC/Num.v,False,feedback,"Found no subterm matching ""(?M1244 - 0)%N"" in the current goal."
EqExact_pair,GHC/Base.v,False,feedback,H is already used.
hs_coq_map,GHC/Base.v,True,,
map_id,GHC/Base.v,True,,
instance_SemigroupLaws_list,GHC/Base.v,False,feedback,"In environment a : Type H : Eq_ a H0 : EqLaws a x, y, z : list a Unable to unify ""?M2164 ++ ?M2165 ++ ?M2166 = (?M2164 ++ ?M2165) ++ ?M2166"" with  ""(Base.Semigroup__list_op_zlzlzgzg__ x      (Base.Semigroup__list_op_zlzlzgzg__ y z) ==    Base.Semigroup__list_op_zlzlzgzg__      (Base.Semigroup__list_op_zlzlzgzg__ x y) z) = true""."
instance_MonadLaws_option,GHC/Base.v,False,feedback,(in proof instance_MonadLaws_option): Attempt to save an incomplete proof
iterates'_ext,GHC/Enum.v,False,feedback,Cannot apply lemma IH
Neq_neq,GHC/Base.v,False,feedback,"In environment t : Type H : Eq_ t H0 : EqLaws t H1 : EqExact t x, y : t Heq : (x == y) = true Unable to unify ""reflect ?M2076 false"" with  ""reflect (x <> y) (H (t -> t -> bool) (op_zsze____ t) x y)""."
unzip_equal_length,GHC/List.v,False,feedback,The reference H2 was not found in the current environment.
elem_nil,Data/Foldable.v,True,,
instance_ApplicativeLaws_identity,Data/Functor/Identity.v,False,feedback,"In environment a : Type v : Identity a Unable to unify ""v"" with ""Base.op_zlztzg__ (Base.pure (fun x : a => x)) v""."
hs_coq_length_list',Data/Foldable.v,False,feedback,The LHS of IH     (List.length xs) does not match any subterm of the goal
instance_SemigroupLaws_comparison,GHC/Base.v,False,feedback,Wrong bullet -: No more subgoals.
EqExact_comparison,GHC/Base.v,False,feedback,Cannot coerce EqExact to an evaluable reference.
simpl_list_nil_eq,GHC/Base.v,True,,
Foldable_foldl'_nil,Data/Foldable.v,True,,
Foldable_elem_proper,Data/Foldable.v,False,feedback,not a rewritable relation: (list a) in rule Hxs
simpl_option_some_eq,GHC/Base.v,False,feedback,The reference Eq_Option__ was not found in the current environment.
hs_coq_foldr_list',Data/Foldable.v,True,,
instance_MonoidLaws_comparison,GHC/Base.v,False,feedback,No product even after head-reduction.
instance_ApplicativeLaws_list,GHC/Base.v,False,feedback,The reference Pure_list was not found in the current environment.
flat_map_concat_map,GHC/Base.v,True,,
map_snd_zip,GHC/List.v,True,,
iter_plus_N,GHC/Enum.v,False,feedback,The LHS of N.add_succ_l     (N.succ _ + _)%N does not match any subterm of the goal
EqLaws_Data_Either_Either,Data/Either.v,False,feedback,The reference reflexivity was not found in the current environment.
instance_MonoidLaws_unit,GHC/Base.v,False,feedback,"In environment x : unit The term ""tt"" has type ""unit"" while it is expected to have type  ""(mappend mempty x == x) = true""."
Eq_Transitive,GHC/Base.v,False,feedback,Cannot coerce EqLaws to an evaluable reference.
EqLaws_Int,GHC/Base.v,False,feedback,The reference Eq_Int__ was not found in the current environment.
Neq_irrefl,GHC/Base.v,False,feedback,The reference Eq_neq was not found in the current environment.
take_drop,GHC/List.v,False,feedback,Expects a disjunctive pattern with 3 branches.
Foldable_foldl_nil,Data/Foldable.v,True,,
Foldable_foldr_nil,Data/Foldable.v,True,,
hs_coq_lenAcc,GHC/List.v,False,feedback,The reference lia was not found in the current environment.
fmfm,GHC/Base.v,False,feedback,The LHS of IH     (flat_map (fun x : a => f x :: nil) w ++ flat_map (map^~ w) xs) does not match any subterm of the goal
hs_coq_foldr_base,GHC/Base.v,True,,
instance_FunctorLaws_list,GHC/Base.v,False,feedback,The LHS of IH     (fmap id xs) does not match any subterm of the goal
hs_coq_tuple_fst,Data/Tuple.v,True,,
instance_FunctorLaws_Data_Either_Either,Data/Either.v,False,feedback,Not an inductive product.
eftInt_In,GHC/Enum.v,False,feedback,Cannot recognize a statement based on nat.
EqExact_list,GHC/Base.v,False,feedback,Cannot coerce EqExact to an evaluable reference.
Foldable_any_cons,Data/Foldable.v,True,,
Foldable_foldr_app,Data/Foldable.v,False,feedback,The LHS of IH     (foldr f s (xs ++ vs2)) does not match any subterm of the goal
foldr_nil,GHC/Base.v,True,,
map_map,GHC/Base.v,False,feedback,a is already used.
instance_MonadLaws_identity,Data/Functor/Identity.v,False,feedback,"In environment A : Type x : Identity A Unable to unify ""x"" with ""Base.op_zgzgze__ x Base.return_""."
Foldable_any_nil,Data/Foldable.v,True,,
simpl_option_none_eq,GHC/Base.v,False,feedback,The reference Eq_option was not found in the current environment.
instance_MonadLaws_list,GHC/Base.v,False,feedback,"In environment A : Type B : Type a : A f : A -> list B Unable to unify ""f a"" with ""return_ a >>= f""."
reverse_nil,GHC/List.v,True,,
zip_unzip_map,GHC/List.v,False,feedback,"Found no subterm matching ""zip (fst (unzip xs)) (Base.map f (snd (unzip xs)))"" in the current goal."
EqLaws_pair,GHC/Base.v,False,feedback,H1 is already used.
EqExact_unit,GHC/Base.v,False,feedback,Not an inductive goal with 1 constructor.
EqExact_Word,GHC/Base.v,False,feedback,Cannot coerce EqExact to an evaluable reference.
length_app,GHC/List.v,False,feedback,"Found no subterm matching ""length (xs' ++ ys)"" in the current goal."
Foldable_foldl_app,Data/Foldable.v,True,,
hs_coq_list_length,GHC/List.v,False,feedback,"Found no subterm matching ""length xs"" in the current goal."
iterates_map,GHC/Enum.v,False,feedback,The LHS of IH     (iterates n f z) does not match any subterm of the goal
N_popcount_Ndouble,Data/Bits/Popcount.v,False,feedback,The reference N2Z.inj_Ndouble was not found in the current environment.
EqExact_bool,GHC/Base.v,False,feedback,The reference Eq___bool was not found in the current environment.
iterates'_map,GHC/Enum.v,False,feedback,The LHS of IH     (iterates' n f z) does not match any subterm of the goal
Neq_inv,GHC/Base.v,False,feedback,The reference Eq_neq was not found in the current environment.
map_cong,GHC/Base.v,True,,
EqLaws_list,GHC/Base.v,False,feedback,The LHS of IH     (xs == xs) does not match any subterm of the goal
hs_coq_foldr_list,Data/Foldable.v,False,feedback,The LHS of IH     (foldr f z xs) does not match any subterm of the goal
EqLaws_comparison,GHC/Base.v,False,feedback,No product even after head-reduction.
iterates_iterates',GHC/Enum.v,False,feedback,No applicable tactic.
simpl_list_cons_eq,GHC/Base.v,False,feedback,The reference Eq_List was not found in the current environment.
flat_map_cons_f,GHC/Base.v,False,feedback,No such goal.
EqLaws_Word,GHC/Base.v,False,feedback,The reference Eq_Word__ was not found in the current environment.
In_zip_map,GHC/List.v,True,,
EqLaws_bool,GHC/Base.v,False,feedback,No product even after head-reduction.
hs_coq_foldl_list,Data/Foldable.v,False,feedback,"In environment A : Type B : Type f : B -> A -> B z : B a : A l' : list A IHl' : foldl f z l' = fold_left f l' z Unable to unify ""foldl f z l' = fold_left f l' z"" with  ""foldl f z (a :: l') = fold_left f l' (f z a)""."
reverse_involutive,GHC/List.v,False,feedback,"Found no subterm matching ""?M2057 ++ []"" in the current goal."
map_append,GHC/Base.v,False,feedback,a is already used.
EqLaws_option,GHC/Base.v,False,feedback,No product even after head-reduction.
EqLaws_unit,GHC/Base.v,False,feedback,No product even after head-reduction.
concat_map,GHC/Base.v,False,feedback,The LHS of map_app     (List.map _ (_ ++ _)) does not match any subterm of the goal
length_cons,GHC/List.v,False,feedback,Omega can't solve this system
foldr_id,GHC/Base.v,True,,
instance_FunctorLaws_option,GHC/Base.v,False,feedback,The reference option_fmap was not found in the current environment.
flat_map_map,GHC/Base.v,True,,
Foldable_elem_app,Data/Foldable.v,False,feedback,The LHS of IH     (any (fun y : A => v == y) (l1' ++ l2)) does not match any subterm of the goal
EqExact_Down,Data/Ord.v,False,feedback,The reference Down_Eq___ was not found in the current environment.
iter_plus_Z,GHC/Enum.v,False,feedback,The LHS of Z.add_0_l     (0 + _)%Z does not match any subterm of the goal
iterates_ext,GHC/Enum.v,False,feedback,"In environment A : Type f1, f2 : A -> A H_eq : f1 =1 f2 n : nat IH : forall z : A, iterates n f1 z = iterates n f2 z z : A Unable to unify ""z :: iterates n f2 (f2 z)"" with ""z :: iterates n f1 (f1 z)""."
length_nil,GHC/List.v,True,,
enumFromTo_Int_In,GHC/Enum.v,False,feedback,Cannot recognize a statement based on nat.
eftInt_iterates',GHC/Enum.v,False,add_err,Syntax error: [tactic:ltac_use_default] expected after [tactic:tactic] (in [vernac:tactic_command]).
In_zip,GHC/List.v,True,,
instance_MonoidLaws_option,GHC/Base.v,False,feedback,No product even after head-reduction.
eftInt_aux_In,GHC/Enum.v,False,feedback,Cannot recognize a statement based on nat.
snd_unzip,GHC/List.v,False,feedback,"Found no subterm matching ""snd (unzip xs)"" in the current goal."
N_double_succ,Data/Bits/Popcount.v,False,feedback,Cannot find a relation to rewrite.
Pos_popcount_1_Is_power,Data/Bits/Popcount.v,False,add_err,Syntax error: [tactic:ltac_use_default] expected after [tactic:tactic] (in [vernac:tactic_command]).
hs_coq_tuple_snd,Data/Tuple.v,True,,
In_zip_snd,GHC/List.v,False,feedback,"Unable to apply lemma of type  ""In (x, y) (zip xs' (y' :: ys')) ->   forall zs : list C,   Datatypes.length xs' = Datatypes.length zs ->   exists z : C, In (z, y) (zip zs (y' :: ys'))"" on hypothesis of type  ""In (x, y) (zip xs' ys')""."
snd_pair,Data/Tuple.v,True,,
Foldable_foldr_map,Data/Foldable.v,False,feedback,The LHS of IH     (foldr (g ∘ f) b0 xs) does not match any subterm of the goal
Foldable_foldl_cons,Data/Foldable.v,True,,
hs_coq_lenAcc_add,GHC/List.v,False,feedback,"Found no subterm matching ""lenAcc xs (acc1 + acc2)%Z"" in the current goal."
N_popcount_double,Data/Bits/Popcount.v,False,feedback,The reference N.popcount_succ_double was not found in the current environment.
EqLaws_Down,Data/Ord.v,False,feedback,Cannot coerce Down to an evaluable reference.
EqLaws_Proxy,Data/Proxy.v,False,feedback,No product even after head-reduction.
elem_cons,Data/Foldable.v,True,,
flat_map_cong,GHC/Base.v,True,,
hs_coq_filter,GHC/List.v,True,,
foldr_single,GHC/Base.v,True,,
hs_coq_foldl_base,GHC/Base.v,False,feedback,"In environment A : Type B : Type f : B -> A -> B z : B a : A l' : list A IH : foldl f z l' = fold_left f l' z Unable to unify ""foldl f z l' = fold_left f l' z"" with  ""foldl f (f z a) l' = fold_left f l' (f z a)""."
EqExact_Int,GHC/Base.v,False,feedback,Cannot coerce EqExact to an evaluable reference.
Eq_is_true_m,GHC/Base.v,False,add_err,Syntax error: [tactic:ltac_use_default] expected after [tactic:tactic] (in [vernac:tactic_command]).
forM_cong,Data/Traversable.v,False,feedback,Not an inductive product.
hs_coq_length_list,Data/Foldable.v,False,feedback,A is already used.
EqExact_option,GHC/Base.v,False,feedback,The reference eq_exact was not found in the current environment.
Eq_reflI,GHC/Base.v,False,feedback,H is already used.
eftInt_aux_iterates,GHC/Enum.v,False,feedback,The reference from was not found in the current environment.
