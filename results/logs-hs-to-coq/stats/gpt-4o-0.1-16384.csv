name,file,tactics_count,tactics
Eq_eq_bool,GHC/Base.v,3,apply;move;move
iterates_In,GHC/Enum.v,12,rewrite;split;move;exists;split;apply;assumption;move;exists;split;apply;assumption
Foldable_length_cons,Data/Foldable.v,4,unfold;simpl;rewrite;reflexivity
flat_map_nil,GHC/Base.v,4,induction;reflexivity;simpl;assumption
flat_map_unpack_cons_f,GHC/List.v,6,intros;induction;reflexivity;simpl;f_equal;apply
Foldable_foldl'_cons,Data/Foldable.v,4,intros;unfold;simpl;auto
instance_MonoidLaws_list,GHC/Base.v,21,split;unfold;unfold;intros;apply;simpl;apply;intros;apply;simpl;apply;intros;apply;reflexivity;intros;apply;induction;simpl;auto;rewrite;reflexivity
enumFromTo_Int_iterates',GHC/Enum.v,1,apply
eftInt_aux_unroll,GHC/Enum.v,9,unfold;unfold;simpl;destruct;reflexivity;f_equal;apply;intros;apply
eq_replace_r,GHC/Base.v,4,intros;apply;reflexivity;assumption
N_popcount_Nsucc_double,Data/Bits/Popcount.v,16,intros;unfold;rewrite;destruct;simpl;induction;simpl;rewrite;reflexivity;simpl;rewrite;reflexivity;simpl;reflexivity;simpl;reflexivity
EqExact_Data_Either_Either,Data/Either.v,13,constructor;intros;apply;case;discriminate;move;subst;move;subst;move;subst;case;apply
Pos_popcount_pow2,Data/Bits/Popcount.v,10,intros;induction;simpl;reflexivity;simpl;rewrite;reflexivity;simpl;rewrite;reflexivity
Foldable_any_app,Data/Foldable.v,8,intros;induction;simpl;reflexivity;simpl;rewrite;rewrite;reflexivity
Eq_eq_Word,GHC/Base.v,5,unfold;case;constructor;apply;rewrite
unzip_zip,GHC/List.v,16,intros;generalize_dependent;generalize_dependent;induction;intros;simpl;inversion;reflexivity;simpl;destruct;inversion;subst;simpl;f_equal;apply;reflexivity
iterates'_In,GHC/Enum.v,19,split;rewrite;move;rewrite;move;exists;split;auto;rewrite;omega;move;rewrite;apply;exists;split;auto;rewrite;rewrite;omega
Foldable_length_nil,Data/Foldable.v,4,unfold;unfold;simpl;reflexivity
lines_def,Data/OldList.v,11,unfold;destruct;reflexivity;simpl;f_equal;destruct;destruct;reflexivity;simpl;f_equal;apply
eq_replace_l,GHC/Base.v,3,intros;rewrite;reflexivity
hs_coq_foldl'_list,Data/Foldable.v,1,apply
instance_MonadLaws_Data_Either_Either,Data/Either.v,22,split;repeat;unfold;simpl;intros;destruct;auto;intros;destruct;auto;intros;destruct;auto;intros;destruct;auto;intros;auto;intros;destruct;destruct;auto
eftInt_aux_pf,../base/GHC/Enum.v,7,intros;apply;destruct;apply;apply;assumption;contradiction
parametric_eq_sym,GHC/Base.v,2,intros;apply
foldr_initial,GHC/Base.v,5,induction;reflexivity;simpl;rewrite;reflexivity
instance_SemigroupLaws_option,GHC/Base.v,8,split;intros;simpl;destruct;simpl;apply;rewrite;apply
Build_EqLaws_reflect,GHC/Base.v,43,intros;constructor;intros;destruct;reflexivity;exfalso;apply;reflexivity;intros;destruct;subst;destruct;reflexivity;exfalso;apply;reflexivity;destruct;subst;exfalso;apply;reflexivity;reflexivity;intros;destruct;subst;destruct;subst;reflexivity;exfalso;apply;reflexivity;destruct;subst;exfalso;apply;reflexivity;destruct;reflexivity;exfalso;apply;apply;assumption;apply
N_popcount_diff,Data/Bits/Popcount.v,16,intros;destruct;simpl;reflexivity;simpl;rewrite;simpl;rewrite;reflexivity;simpl;rewrite;simpl;rewrite;reflexivity;simpl;apply
In_zip_swap,GHC/List.v,17,intros;revert;induction;intros;simpl;contradiction;destruct;simpl;contradiction;simpl;destruct;left;inversion;reflexivity;right;apply;assumption
Eq_Symmetric,GHC/Base.v,2,intros;apply
List_foldl_foldr,GHC/List.v,9,intros;revert;induction;intros;simpl;reflexivity;simpl;rewrite;reflexivity
instance_SemigroupLaws_unit,GHC/Base.v,5,constructor;intros;unfold;simpl;reflexivity
dropWhile_cons_prop,../base/Data/OldList.v,13,intros;destruct;simpl;inversion;simpl;destruct;apply;simpl;rewrite;discriminate;inversion;subst;assumption
iterates'_length,GHC/Enum.v,5,induction;reflexivity;simpl;f_equal;apply
hs_coq_reverse,GHC/List.v,11,unfold;induction;simpl;reflexivity;rewrite;clear;induction;simpl;reflexivity;rewrite;reflexivity
instance_ApplicativeLaws_Data_Either_Either,Data/Either.v,23,split;repeat;unfold;intros;destruct;auto;intros;destruct;destruct;destruct;auto;intros;auto;intros;destruct;auto;intros;destruct;destruct;auto;intros;destruct;auto
fst_pair,Data/Tuple.v,1,reflexivity
hs_coq_foldl_list',Data/Foldable.v,1,apply
instance_FunctorLaws_identity,Data/Functor/Identity.v,7,split;intros;simpl;reflexivity;intros;simpl;reflexivity
iter_plus_nat,GHC/Enum.v,5,elim;reflexivity;simpl;rewrite;omega
Foldable_foldr_cons,Data/Foldable.v,4,intros;unfold;simpl;reflexivity
lines_cons,Data/OldList.v,4,intros;rewrite;simpl;reflexivity
Foldable_foldl'_app,Data/Foldable.v,4,intros;unfold;rewrite;reflexivity
flat_map_cons_id,GHC/Base.v,1,rewrite
Eq_eq_Int,GHC/Base.v,6,unfold;apply;move;done;move;apply
mapAccumL_cons,Data/Traversable.v,10,intros;unfold;unfold;unfold;simpl;unfold;simpl;destruct;destruct;reflexivity
Eq_Equivalence,GHC/Base.v,2,constructor;typeclasses_eauto
break_length,../base/Data/OldList.v,21,intros;generalize_dependent;induction;intros;simpl;inversion;simpl;apply;simpl;destruct;inversion;simpl;apply;apply;destruct;inversion;subst;simpl;apply;apply;reflexivity
Neq_sym,GHC/Base.v,4,move;rewrite;apply;apply
mapAccumL_nil,Data/Traversable.v,4,intros;unfold;simpl;reflexivity
Eq_m,GHC/Base.v,3,intros;apply;assumption
EqExact_Proxy,Data/Proxy.v,5,split;intros;apply;destruct;reflexivity
Neq_atrans,GHC/Base.v,10,move;case;rewrite;rewrite;move;rewrite;rewrite;move;rewrite;rewrite
reverse_unit,GHC/List.v,7,intros;induction;simpl;reflexivity;simpl;rewrite;reflexivity
hs_coq_partition,Data/OldList.v,11,unfold;induction;reflexivity;simpl;destruct;simpl;rewrite;reflexivity;simpl;rewrite;reflexivity
Eq_Reflexive,GHC/Base.v,2,intros;apply
reverse_append,GHC/List.v,4,intros;simpl;rewrite;reflexivity
N_popcount_1_pow2,Data/Bits/Popcount.v,9,intros;destruct;simpl;discriminate;apply;destruct;exists;rewrite;reflexivity
iterates_length,GHC/Enum.v,1,rewrite
Pop_popcount_diff,Data/Bits/Popcount.v,0,
elem_eq,Data/Foldable.v,8,intros;induction;hs_simpl;reflexivity;hs_simpl;rewrite;f_equal;apply
length_zip,GHC/List.v,14,intros;generalize_dependent;induction;intros;destruct;simpl;auto;destruct;simpl;discriminate;inversion;f_equal;apply;assumption
In_zip_fst,GHC/List.v,22,intros;generalize_dependent;induction;intros;destruct;simpl;contradiction;destruct;simpl;discriminate;destruct;inversion;subst;exists;left;reflexivity;apply;auto;destruct;exists;right;assumption
instance_ApplicativeLaws_option,GHC/Base.v,21,split;intros;destruct;reflexivity;intros;destruct;destruct;destruct;reflexivity;intros;reflexivity;intros;destruct;reflexivity;intros;destruct;destruct;reflexivity;intros;destruct;reflexivity
N_popcount_pow2,Data/Bits/Popcount.v,11,intros;unfold;rewrite;destruct;simpl;reflexivity;rewrite;rewrite;apply;apply;discriminate
snd_unzip_map,GHC/List.v,6,intros;induction;reflexivity;simpl;rewrite;reflexivity
words_cons,Data/OldList.v,8,intros;unfold;simpl;destruct;reflexivity;simpl;rewrite;reflexivity
dropWhile_cons_length,../base/Data/OldList.v,14,intros;induction;simpl;discriminate;simpl;destruct;apply;simpl;apply;assumption;inversion;subst;simpl;apply
words_nil,Data/OldList.v,3,unfold;simpl;reflexivity
forM_map,Data/Traversable.v,9,intros;unfold;unfold;induction;simpl;reflexivity;simpl;rewrite;reflexivity
flat_map_app,GHC/Base.v,2,rewrite;reflexivity
parametric_eq_trans,GHC/Base.v,3,intros;apply;assumption
safeSubN_sub,../base/GHC/Num.v,7,intros;unfold;destruct;exfalso;apply;omega;reflexivity
EqExact_pair,GHC/Base.v,19,split;unfold;intros;simpl;case;case;constructor;move;reflexivity;move;contradict;move;move;contradict;move;contradict;move;contradict;move
hs_coq_map,GHC/Base.v,1,reflexivity
map_id,GHC/Base.v,6,unfold;induction;reflexivity;simpl;rewrite;reflexivity
instance_SemigroupLaws_list,GHC/Base.v,18,split;unfold;intros;unfold;induction;simpl;apply;destruct;simpl;apply;destruct;simpl;apply;rewrite;apply;split;apply;apply
instance_MonadLaws_option,GHC/Base.v,21,split;repeat;unfold;simpl;intros;destruct;reflexivity;intros;destruct;reflexivity;intros;destruct;reflexivity;intros;destruct;reflexivity;intros;reflexivity;intros;destruct;reflexivity
iterates'_ext,GHC/Enum.v,5,move;elim;rewrite;f_equal;apply
Neq_neq,GHC/Base.v,4,rewrite;case;constructor;auto
unzip_equal_length,GHC/List.v,16,intros;generalize_dependent;generalize_dependent;induction;intros;simpl;inversion;reflexivity;simpl;destruct;inversion;subst;simpl;f_equal;apply;reflexivity
elem_nil,Data/Foldable.v,4,intros;unfold;rewrite;reflexivity
instance_ApplicativeLaws_identity,Data/Functor/Identity.v,8,constructor;intros;destruct;destruct;destruct;destruct;simpl;reflexivity
hs_coq_length_list',Data/Foldable.v,2,unfold;apply
instance_SemigroupLaws_comparison,GHC/Base.v,6,split;intros;unfold;destruct;simpl;reflexivity
EqExact_comparison,GHC/Base.v,5,constructor;intros;destruct;constructor;congruence
simpl_list_nil_eq,GHC/Base.v,3,unfold;simpl;auto
Foldable_foldl'_nil,Data/Foldable.v,3,unfold;simpl;auto
Foldable_elem_proper,Data/Foldable.v,6,intros;unfold;unfold;apply;apply;apply
simpl_option_some_eq,GHC/Base.v,3,unfold;simpl;reflexivity
hs_coq_foldr_list',Data/Foldable.v,2,unfold;apply
instance_MonoidLaws_comparison,GHC/Base.v,19,split;unfold;unfold;intros;destruct;apply;intros;destruct;apply;intros;apply;intros;induction;simpl;apply;destruct;simpl;rewrite;apply
instance_ApplicativeLaws_list,GHC/Base.v,0,
flat_map_concat_map,GHC/Base.v,5,induction;reflexivity;simpl;rewrite;reflexivity
map_snd_zip,GHC/List.v,15,intros;induction;intros;simpl;destruct;simpl;auto;inversion;destruct;simpl;inversion;inversion;f_equal;apply;auto
iter_plus_N,GHC/Enum.v,3,elim;rewrite;reflexivity
EqLaws_Data_Either_Either,Data/Either.v,13,constructor;move;simpl;apply;move;simpl;apply;move;simpl;apply;move;simpl;apply
instance_MonoidLaws_unit,GHC/Base.v,4,split;unfold;intros;auto
Eq_Transitive,GHC/Base.v,3,intros;apply;assumption
EqLaws_Int,GHC/Base.v,1,EqLaws_from_reflect
Neq_irrefl,GHC/Base.v,4,move;rewrite;apply;apply
take_drop,GHC/List.v,13,intros;generalize_dependent;induction;intros;simpl;destruct;reflexivity;destruct;simpl;reflexivity;simpl;f_equal;apply
Foldable_foldl_nil,Data/Foldable.v,3,unfold;simpl;auto
Foldable_foldr_nil,Data/Foldable.v,3,intros;unfold;reflexivity
hs_coq_lenAcc,GHC/List.v,7,generalize_dependent;induction;simpl;intros;reflexivity;rewrite;lia
fmfm,GHC/Base.v,3,apply;intros;apply
hs_coq_foldr_base,GHC/Base.v,1,reflexivity
instance_FunctorLaws_list,GHC/Base.v,7,split;intros;unfold;apply;intros;unfold;apply
hs_coq_tuple_fst,Data/Tuple.v,2,destruct;reflexivity
instance_FunctorLaws_Data_Either_Either,Data/Either.v,9,split;intros;simpl;reflexivity;reflexivity;intros;simpl;reflexivity;reflexivity
eftInt_In,GHC/Enum.v,28,rewrite;split;rewrite;move;rewrite;omega;elim;exists;apply;suff;apply;omega;move;case;move;omega;case;subst;exists;omega;have;omega;case;omega;rewrite;exists;apply;rewrite
EqExact_list,GHC/Base.v,26,constructor;induction;intros;constructor;reflexivity;constructor;discriminate;constructor;discriminate;simpl;destruct;constructor;f_equal;assumption;constructor;intros;inversion;contradiction;constructor;intros;inversion;contradiction;constructor;intros;inversion;contradiction
Foldable_any_cons,Data/Foldable.v,6,intros;unfold;unfold;unfold;simpl;auto
Foldable_foldr_app,Data/Foldable.v,4,intros;unfold;rewrite;reflexivity
foldr_nil,GHC/Base.v,1,reflexivity
map_map,GHC/Base.v,6,rewrite;induction;simpl;reflexivity;rewrite;reflexivity
instance_MonadLaws_identity,Data/Functor/Identity.v,5,constructor;intros;destruct;cbn;reflexivity
Foldable_any_nil,Data/Foldable.v,10,intros;unfold;unfold;unfold;simpl;unfold;unfold;unfold;simpl;reflexivity
simpl_option_none_eq,GHC/Base.v,3,repeat;unfold;auto
instance_MonadLaws_list,GHC/Base.v,31,split;intros;repeat;unfold;simpl;rewrite;reflexivity;induction;simpl;auto;rewrite;reflexivity;induction;simpl;auto;rewrite;rewrite;reflexivity;induction;simpl;auto;rewrite;reflexivity;reflexivity;unfold;induction;simpl;auto;rewrite;rewrite;reflexivity
reverse_nil,GHC/List.v,3,unfold;simpl;reflexivity
zip_unzip_map,GHC/List.v,9,intros;induction;reflexivity;simpl;repeat;expand_pairs;simpl;f_equal;apply
EqLaws_pair,GHC/Base.v,0,
EqExact_unit,GHC/Base.v,5,constructor;intros;destruct;constructor;reflexivity
EqExact_Word,GHC/Base.v,2,constructor;apply
length_app,GHC/List.v,5,rewrite;rewrite;rewrite;rewrite;apply
Foldable_foldl_app,Data/Foldable.v,5,intros;unfold;rewrite;rewrite;reflexivity
hs_coq_list_length,GHC/List.v,5,unfold;rewrite;simpl;rewrite;reflexivity
iterates_map,GHC/Enum.v,4,rewrite;apply;elim;rewrite
N_popcount_Ndouble,Data/Bits/Popcount.v,4,intros;unfold;simpl;reflexivity
EqExact_bool,GHC/Base.v,2,constructor;apply
iterates'_map,GHC/Enum.v,6,induction;simpl;reflexivity;simpl;f_equal;apply
Neq_inv,GHC/Base.v,1,apply
map_cong,GHC/Base.v,4,move;rewrite;apply;exact
EqLaws_list,GHC/Base.v,0,
hs_coq_foldr_list,Data/Foldable.v,2,unfold;reflexivity
EqLaws_comparison,GHC/Base.v,19,split;intros;destruct;reflexivity;intros;destruct;simpl;reflexivity;discriminate;intros;destruct;simpl;reflexivity;discriminate;intros;destruct;simpl;reflexivity;discriminate
iterates_iterates',GHC/Enum.v,2,elim;rewrite
simpl_list_cons_eq,GHC/Base.v,3,unfold;simpl;reflexivity
flat_map_cons_f,GHC/Base.v,3,rewrite;elim;rewrite
EqLaws_Word,GHC/Base.v,1,EqLaws_from_reflect
In_zip_map,GHC/List.v,10,intros;induction;simpl;contradiction;simpl;destruct;inversion;reflexivity;apply;assumption
EqLaws_bool,GHC/Base.v,1,EqLaws_from_reflect
hs_coq_foldl_list,Data/Foldable.v,1,apply
reverse_involutive,GHC/List.v,3,intros;rewrite;apply
map_append,GHC/Base.v,2,rewrite;reflexivity
EqLaws_option,GHC/Base.v,29,split;unfold;intros;simpl;apply;apply;intros;simpl;reflexivity;rewrite;reflexivity;reflexivity;reflexivity;intros;simpl;reflexivity;intros;apply;assumption;intros;discriminate;intros;discriminate;intros;discriminate;intros;simpl;reflexivity;apply
EqLaws_unit,GHC/Base.v,9,constructor;intros;reflexivity;intros;reflexivity;intros;reflexivity;intros;reflexivity
concat_map,GHC/Base.v,7,induction;simpl;reflexivity;simpl;rewrite;rewrite;reflexivity
length_cons,GHC/List.v,6,unfold;simpl;rewrite;rewrite;simpl;omega
foldr_id,GHC/Base.v,5,induction;simpl;reflexivity;simpl;apply
instance_FunctorLaws_option,GHC/Base.v,7,split;intros;simpl;reflexivity;intros;simpl;reflexivity
flat_map_map,GHC/Base.v,4,rewrite;rewrite;rewrite;reflexivity
Foldable_elem_app,Data/Foldable.v,3,intros;unfold;apply
EqExact_Down,Data/Ord.v,12,constructor;intros;unfold;simpl;destruct;constructor;congruence;constructor;intros;apply;inversion;reflexivity
iter_plus_Z,GHC/Enum.v,2,elim;rewrite
iterates_ext,GHC/Enum.v,3,move;elim;rewrite
length_nil,GHC/List.v,3,unfold;simpl;reflexivity
enumFromTo_Int_In,GHC/Enum.v,1,apply
eftInt_iterates',GHC/Enum.v,2340,rewrite;case;rewrite;apply;rewrite;apply;rewrite;apply;rewrite;apply;rewrite;rewrite;rewrite;f_equal;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite;rewrite
In_zip,GHC/List.v,18,induction;intros;simpl;contradiction;destruct;simpl;contradiction;simpl;destruct;inversion;split;left;reflexivity;apply;destruct;split;right;assumption
instance_MonoidLaws_option,GHC/Base.v,31,split;intros;destruct;simpl;apply;unfold;apply;intros;destruct;simpl;apply;unfold;apply;intros;destruct;destruct;simpl;apply;unfold;apply;intros;induction;simpl;apply;unfold;rewrite;destruct;simpl;apply;unfold;apply
eftInt_aux_In,GHC/Enum.v,18,rewrite;split;move;subst;rewrite;split;omega;apply;rewrite;assumption;move;exists;split;rewrite;omega;rewrite;rewrite;reflexivity
snd_unzip,GHC/List.v,7,intros;unfold;induction;reflexivity;simpl;rewrite;reflexivity
N_double_succ,Data/Bits/Popcount.v,6,intros;destruct;simpl;reflexivity;simpl;reflexivity
Pos_popcount_1_Is_power,Data/Bits/Popcount.v,17,intros;induction;simpl;discriminate;destruct;simpl;apply;specialize;unfold;exists;rewrite;f_equal;apply;simpl;discriminate;simpl;discriminate
hs_coq_tuple_snd,Data/Tuple.v,1,reflexivity
In_zip_snd,GHC/List.v,14,induction;intros;destruct;destruct;simpl;inversion;clear;contradiction;destruct;inversion;subst;eauto;destruct;eauto
snd_pair,Data/Tuple.v,2,simpl;reflexivity
Foldable_foldr_map,Data/Foldable.v,6,induction;simpl;reflexivity;simpl;rewrite;reflexivity
Foldable_foldl_cons,Data/Foldable.v,3,unfold;simpl;auto
hs_coq_lenAcc_add,GHC/List.v,6,induction;simpl;reflexivity;simpl;rewrite;omega
N_popcount_double,Data/Bits/Popcount.v,12,intros;destruct;reflexivity;simpl;induction;simpl;rewrite;reflexivity;simpl;rewrite;reflexivity;reflexivity
EqLaws_Down,Data/Ord.v,10,constructor;move;apply;move;apply;move;apply;move;rewrite;apply
EqLaws_Proxy,Data/Proxy.v,28,constructor;move;reflexivity;move;unfold;move;apply;move;unfold;move;apply;move;unfold;simpl;case_eq;case_eq;intros;reflexivity;move;rewrite;move;rewrite;discriminate;move;rewrite;move;rewrite;discriminate
elem_cons,Data/Foldable.v,4,intros;unfold;rewrite;reflexivity
flat_map_cong,GHC/Base.v,3,move;elim;rewrite
hs_coq_filter,GHC/List.v,8,induction;reflexivity;simpl;destruct;simpl;f_equal;apply;apply
foldr_single,GHC/Base.v,2,simpl;reflexivity
hs_coq_foldl_base,GHC/Base.v,6,unfold;induction;reflexivity;simpl;rewrite;reflexivity
EqExact_Int,GHC/Base.v,2,constructor;apply
Eq_is_true_m,GHC/Base.v,0,
forM_cong,Data/Traversable.v,13,intros;induction;reflexivity;simpl;rewrite;left;reflexivity;f_equal;apply;intros;apply;right;assumption
hs_coq_length_list,Data/Foldable.v,1,apply
EqExact_option,GHC/Base.v,23,constructor;intros;unfold;destruct;simpl;destruct;apply;subst;constructor;reflexivity;constructor;intros;inversion;apply;congruence;constructor;intros;inversion;constructor;intros;inversion;constructor;reflexivity
Eq_reflI,GHC/Base.v,3,intros;rewrite;apply
eftInt_aux_iterates,GHC/Enum.v,17,revert;induction;intros;rewrite;case;subst;rewrite;simpl;reflexivity;rewrite;simpl;f_equal;apply;apply;omega;apply;assumption
